"use strict";
/*
 * @adonisjs/i18n
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const I18nManager_1 = require("../src/I18nManager");
const View_1 = require("../src/Bindings/View");
const Context_1 = require("../src/Bindings/Context");
const Validator_1 = require("../src/Bindings/Validator");
class I18nProvider {
    constructor(application) {
        this.application = application;
    }
    /**
     * Register I18n as a binding to the container
     */
    register() {
        this.application.container.singleton('Adonis/Addons/I18n', () => {
            const emitter = this.application.container.resolveBinding('Adonis/Core/Event');
            const logger = this.application.container.resolveBinding('Adonis/Core/Logger');
            const config = this.application.container.resolveBinding('Adonis/Core/Config').get('i18n', {});
            return new I18nManager_1.I18nManager(this.application, emitter, logger, config);
        });
    }
    /**
     * Register i18n instance to the HTTP context and create the "t"
     * helper
     */
    boot() {
        const I18n = this.application.container.resolveBinding('Adonis/Addons/I18n');
        /**
         * Share I18n instance with the HTTP context
         */
        this.application.container.withBindings(['Adonis/Core/HttpContext'], (Context) => {
            (0, Context_1.contextBindings)(Context, I18n);
        });
        /**
         * Add required globals to the template engine
         */
        this.application.container.withBindings(['Adonis/Core/View'], (View) => {
            (0, View_1.viewBindings)(View, I18n);
        });
        /**
         * Hook into validator to provide default validation messages
         */
        if (I18n.config.provideValidatorMessages === true) {
            this.application.container.withBindings(['Adonis/Core/Validator'], ({ validator }) => {
                (0, Validator_1.validatorBindings)(validator, I18n);
            });
        }
        /**
         * Register repl binding when in repl environment
         */
        if (this.application.environment === 'repl') {
            this.application.container.withBindings(['Adonis/Addons/Repl'], (Repl) => {
                const { replBindings } = require('../src/Bindings/Repl');
                replBindings(this.application, Repl);
            });
        }
    }
    /**
     * Hook into start lifecycle to load all translation
     * messages
     */
    async ready() {
        const I18n = this.application.container.resolveBinding('Adonis/Addons/I18n');
        await I18n.loadTranslations();
    }
}
exports.default = I18nProvider;
