"use strict";
/*
 * @adonisjs/i18n
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
/**
 * Returns absolute path to the stub relative from the templates
 * directory
 */
function getStub(...relativePaths) {
    return (0, path_1.join)(__dirname, 'templates', ...relativePaths);
}
/**
 * Create the middleware
 */
function makeMiddleware(projectRoot, app, sink) {
    const middlewareDirectory = app.resolveNamespaceDirectory('middleware') || 'app/Middleware';
    const middlewarePath = (0, path_1.join)(middlewareDirectory, 'DetectUserLocale.ts');
    const middlewareTemplate = new sink.files.MustacheFile(projectRoot, middlewarePath, getStub('DetectUserLocale.txt'));
    if (middlewareTemplate.exists()) {
        sink.logger.action('create').skipped(`${middlewarePath} file already exists`);
    }
    else {
        middlewareTemplate.apply({}).commit();
        sink.logger.action('create').succeeded(middlewarePath);
    }
}
/**
 * Instructions to be executed when setting up the package.
 */
async function instructions(projectRoot, app, sink) {
    makeMiddleware(projectRoot, app, sink);
    if (!(0, fs_1.existsSync)(app.resourcesPath('lang'))) {
        (0, fs_1.mkdirSync)(app.resourcesPath('lang'), { recursive: true });
        const resourceDir = app.directoriesMap.get('resources') || 'resources';
        sink.logger.action('create').succeeded(`./${resourceDir}/lang`);
    }
}
exports.default = instructions;
