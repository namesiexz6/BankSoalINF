"use strict";
/*
 * @adonisjs/i18n
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = void 0;
/**
 * Units and the upper bound milliseconds they hold
 */
const UNITS = {
    years: 24 * 60 * 60 * 1000 * 365,
    months: (24 * 60 * 60 * 1000 * 365) / 12,
    days: 24 * 60 * 60 * 1000,
    hours: 60 * 60 * 1000,
    minutes: 60 * 1000,
    seconds: 1000,
};
/**
 * Formats relative time to seconds. The "test" method can return true
 * to claim the diff for formatting.
 */
const SECONDS_FORMATTER = {
    test: (diff) => diff < UNITS.minutes,
    format: (formatter, diff) => {
        return formatter.format(Math.floor(diff / UNITS.seconds), 'seconds');
    },
};
/**
 * Formats relative time to minutes. The "test" method can return true
 * to claim the diff for formatting.
 */
const MINUTES_FORMATTER = {
    test: (diff) => diff < UNITS.hours,
    format: (formatter, diff) => {
        return formatter.format(Math.floor(diff / UNITS.minutes), 'minutes');
    },
};
/**
 * Formats relative time to hours. The "test" method can return true
 * to claim the diff for formatting.
 */
const HOURS_FORMATTER = {
    test: (diff) => diff < UNITS.days,
    format: (formatter, diff) => {
        return formatter.format(Math.floor(diff / UNITS.hours), 'hours');
    },
};
/**
 * Formats relative time to days. The "test" method can return true
 * to claim the diff for formatting.
 */
const DAYS_FORMATTER = {
    test: (diff) => diff < UNITS.months,
    format: (formatter, diff) => {
        return formatter.format(Math.floor(diff / UNITS.days), 'days');
    },
};
/**
 * Formats relative time to months. The "test" method can return true
 * to claim the diff for formatting.
 */
const MONTHS_FORMATTER = {
    test: (diff) => diff < UNITS.years,
    format: (formatter, diff) => {
        return formatter.format(Math.floor(diff / UNITS.months), 'months');
    },
};
/**
 * Formats relative time to years. The "test" method can return true
 * to claim the diff for formatting.
 */
const YEARS_FORMATTER = {
    test: (_) => true,
    format: (formatter, diff) => {
        return formatter.format(Math.floor(diff / UNITS.years), 'years');
    },
};
/**
 * An stack of formatter. Do not change their order, as we invoke
 * them from smallest to the largest unit
 */
const UNITS_FORMATTER = [
    SECONDS_FORMATTER,
    MINUTES_FORMATTER,
    HOURS_FORMATTER,
    DAYS_FORMATTER,
    MONTHS_FORMATTER,
    YEARS_FORMATTER,
];
/**
 * Formats a relative time to a string with "auto" unit
 */
function format(formatter, diff) {
    const absDiff = Math.abs(diff);
    return UNITS_FORMATTER.find(({ test }) => test(absDiff)).format(formatter, diff);
}
exports.format = format;
