"use strict";
/*
 * @adonisjs/redis
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisClusterConnection = void 0;
/// <reference path="../../adonis-typings/redis.ts" />
const ioredis_1 = __importDefault(require("ioredis"));
const ioMethods_1 = require("../ioMethods");
const AbstractConnection_1 = require("../AbstractConnection");
/**
 * Redis cluster connection exposes the API to run Redis commands using `ioredis` as the
 * underlying client. The class abstracts the need of creating and managing multiple
 * pub/sub connections by hand, since it handles that internally by itself.
 */
class RedisClusterConnection extends AbstractConnection_1.AbstractConnection {
    constructor(connectionName, config, application) {
        super(connectionName, application);
        this.config = config;
        this.ioConnection = new ioredis_1.default.Cluster(this.config.clusters, this.config.clusterOptions);
        this.proxyConnectionEvents();
    }
    /**
     * Creates the subscriber connection, the [[AbstractConnection]] will
     * invoke this method when first subscription is created.
     */
    makeSubscriberConnection() {
        this.ioSubscriberConnection = new ioredis_1.default.Cluster(this.config.clusters, this.config.clusterOptions);
    }
    /**
     * Returns cluster nodes
     */
    nodes(role) {
        return this.ioConnection.nodes(role);
    }
}
exports.RedisClusterConnection = RedisClusterConnection;
ioMethods_1.ioMethods.forEach((method) => {
    RedisClusterConnection.prototype[method] = function redisConnectionProxyFn(...args) {
        return this.ioConnection[method](...args);
    };
});
