"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
class AuthController {
    async login({ request, auth, response, session }) {
        const { username, password } = request.all();
        try {
            const user = await User_1.default.findBy("username", username);
            if (!user) {
                session.flash('error', 'Username atau Password salah!');
                return response.redirect('/login');
            }
            await Hash_1.default.verify(user.password, password);
            await auth.use("web").attempt(username, password);
            session.put('role', 1);
            session.put('nama', user.nama);
            return response.redirect('/');
        }
        catch (error) {
            session.flash('error', 'Username atau Password salah!');
            return response.redirect('/login');
        }
    }
    async register({ request, response }) {
        const { nama, username, password } = request.all();
        try {
            const user = await User_1.default.create({ nama, username, password: password });
            return response.status(201).json(user);
        }
        catch (error) {
            console.error(error);
            return response
                .status(400)
                .json({ message: "Failed to create user", error: error.message });
        }
    }
    async logout({ auth, response, session }) {
        session.put('role', 0);
        await auth.use("web").logout();
        return response.redirect("/login");
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGlGQUFtQztBQUNuQyxrRkFBeUM7QUFJekMsTUFBTSxjQUFjO0lBTVgsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBdUI7UUFDMUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFHN0MsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFckQsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO2dCQUN2RCxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDcEM7WUFFRCxNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUUzQyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNsRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFHOUIsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO1lBQ3ZELE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDOUQsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ25ELElBQUk7WUFDRixNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZFLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsT0FBTyxRQUFRO2lCQUNaLE1BQU0sQ0FBQyxHQUFHLENBQUM7aUJBQ1gsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNyRTtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQXVCO1FBQ2xFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3ZCLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMvQixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUdBO0FBRUQsa0JBQWUsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFVzZXIgZnJvbSBcIkFwcC9Nb2RlbHMvVXNlclwiO1xyXG5pbXBvcnQgSGFzaCBmcm9tIFwiQGlvYzpBZG9uaXMvQ29yZS9IYXNoXCI7XHJcblxyXG5pbXBvcnQgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSBcIkBpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHRcIjtcclxuXHJcbmNsYXNzIEF1dGhDb250cm9sbGVyIHtcclxuICBcclxuICAvL3B1YmxpYyBhc3luYyBpbmRleCh7dmlld30pIHtcclxuICAvLyByZXR1cm4gdmlldy5yZW5kZXIoJ2F1dGgvbG9naW4nKVxyXG4gIC8vfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgbG9naW4oeyByZXF1ZXN0LCBhdXRoLCByZXNwb25zZSwgc2Vzc2lvbiB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcbiAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gcmVxdWVzdC5hbGwoKTtcclxuICAgIFxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeShcInVzZXJuYW1lXCIsIHVzZXJuYW1lKTtcclxuICAgICAgXHJcbiAgICAgIGlmICghdXNlcikge1xyXG4gICAgICAgIHNlc3Npb24uZmxhc2goJ2Vycm9yJywgJ1VzZXJuYW1lIGF0YXUgUGFzc3dvcmQgc2FsYWghJylcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVkaXJlY3QoJy9sb2dpbicpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIEd1bmFrYW4gbWV0aG9kIGB2ZXJpZnlgIHVudHVrIG1lbXZlcmlmaWthc2kgcGFzc3dvcmRcclxuICAgICAgYXdhaXQgSGFzaC52ZXJpZnkodXNlci5wYXNzd29yZCwgcGFzc3dvcmQpO1xyXG5cclxuICAgICAgYXdhaXQgYXV0aC51c2UoXCJ3ZWJcIikuYXR0ZW1wdCh1c2VybmFtZSwgcGFzc3dvcmQpO1xyXG4gICAgICBzZXNzaW9uLnB1dCgncm9sZScsIDEpXHJcbiAgICAgIHNlc3Npb24ucHV0KCduYW1hJywgdXNlci5uYW1hKVxyXG4gICAgICBcclxuICAgICAgXHJcbiAgICAgIHJldHVybiByZXNwb25zZS5yZWRpcmVjdCgnLycpXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBzZXNzaW9uLmZsYXNoKCdlcnJvcicsICdVc2VybmFtZSBhdGF1IFBhc3N3b3JkIHNhbGFoIScpXHJcbiAgICAgIHJldHVybiByZXNwb25zZS5yZWRpcmVjdCgnL2xvZ2luJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgcmVnaXN0ZXIoeyByZXF1ZXN0LCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcbiAgICBjb25zdCB7IG5hbWEsIHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gcmVxdWVzdC5hbGwoKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh7IG5hbWEsIHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmQgfSk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAxKS5qc29uKHVzZXIpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgIHJldHVybiByZXNwb25zZVxyXG4gICAgICAgIC5zdGF0dXMoNDAwKVxyXG4gICAgICAgIC5qc29uKHsgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIHVzZXJcIiwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgbG9nb3V0KHsgYXV0aCwgcmVzcG9uc2UsIHNlc3Npb24gfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgc2Vzc2lvbi5wdXQoJ3JvbGUnLDApXHJcbiAgYXdhaXQgYXV0aC51c2UoXCJ3ZWJcIikubG9nb3V0KCk7XHJcbiAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KFwiL2xvZ2luXCIpO1xyXG59XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXV0aENvbnRyb2xsZXI7XHJcbiJdfQ==