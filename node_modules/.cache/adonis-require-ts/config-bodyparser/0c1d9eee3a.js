"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bodyParserConfig = {
    whitelistedMethods: ['POST', 'PUT', 'PATCH', 'DELETE'],
    json: {
        encoding: 'utf-8',
        limit: '1mb',
        strict: true,
        types: [
            'application/json',
            'application/json-patch+json',
            'application/vnd.api+json',
            'application/csp-report',
        ],
    },
    form: {
        encoding: 'utf-8',
        limit: '1mb',
        queryString: {},
        convertEmptyStringsToNull: true,
        types: [
            'application/x-www-form-urlencoded',
        ],
    },
    raw: {
        encoding: 'utf-8',
        limit: '1mb',
        queryString: {},
        types: [
            'text/*',
        ],
    },
    multipart: {
        autoProcess: true,
        processManually: [],
        encoding: 'utf-8',
        convertEmptyStringsToNull: true,
        maxFields: 1000,
        limit: '20mb',
        types: [
            'multipart/form-data',
        ],
    },
};
exports.default = bodyParserConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9keXBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvZHlwYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFTQSxNQUFNLGdCQUFnQixHQUFxQjtJQVV6QyxrQkFBa0IsRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQztJQVd0RCxJQUFJLEVBQUU7UUFDSixRQUFRLEVBQUUsT0FBTztRQUNqQixLQUFLLEVBQUUsS0FBSztRQUNaLE1BQU0sRUFBRSxJQUFJO1FBQ1osS0FBSyxFQUFFO1lBQ0wsa0JBQWtCO1lBQ2xCLDZCQUE2QjtZQUM3QiwwQkFBMEI7WUFDMUIsd0JBQXdCO1NBQ3pCO0tBQ0Y7SUFXRCxJQUFJLEVBQUU7UUFDSixRQUFRLEVBQUUsT0FBTztRQUNqQixLQUFLLEVBQUUsS0FBSztRQUNaLFdBQVcsRUFBRSxFQUFFO1FBWWYseUJBQXlCLEVBQUUsSUFBSTtRQUUvQixLQUFLLEVBQUU7WUFDTCxtQ0FBbUM7U0FDcEM7S0FDRjtJQVlELEdBQUcsRUFBRTtRQUNILFFBQVEsRUFBRSxPQUFPO1FBQ2pCLEtBQUssRUFBRSxLQUFLO1FBQ1osV0FBVyxFQUFFLEVBQUU7UUFDZixLQUFLLEVBQUU7WUFDTCxRQUFRO1NBQ1Q7S0FDRjtJQVdELFNBQVMsRUFBRTtRQWNULFdBQVcsRUFBRSxJQUFJO1FBc0JqQixlQUFlLEVBQUUsRUFBRTtRQXVCbkIsUUFBUSxFQUFFLE9BQU87UUFZakIseUJBQXlCLEVBQUUsSUFBSTtRQVcvQixTQUFTLEVBQUUsSUFBSTtRQVdmLEtBQUssRUFBRSxNQUFNO1FBVWIsS0FBSyxFQUFFO1lBQ0wscUJBQXFCO1NBQ3RCO0tBQ0Y7Q0FDRixDQUFBO0FBRUQsa0JBQWUsZ0JBQWdCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29uZmlnIHNvdXJjZTogaHR0cHM6Ly9naXQuaW8vSmZlZm5cclxuICpcclxuICogRmVlbCBmcmVlIHRvIGxldCB1cyBrbm93IHZpYSBQUiwgaWYgeW91IGZpbmQgc29tZXRoaW5nIGJyb2tlbiBpbiB0aGlzIGNvbmZpZ1xyXG4gKiBmaWxlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB0eXBlIHsgQm9keVBhcnNlckNvbmZpZyB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvQm9keVBhcnNlcidcclxuXHJcbmNvbnN0IGJvZHlQYXJzZXJDb25maWc6IEJvZHlQYXJzZXJDb25maWcgPSB7XHJcbiAgLypcclxuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICB8IFdoaXRlIGxpc3RlZCBtZXRob2RzXHJcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgfFxyXG4gIHwgSFRUUCBtZXRob2RzIGZvciB3aGljaCBib2R5IHBhcnNpbmcgbXVzdCBiZSBwZXJmb3JtZWQuIEl0IGlzIGEgZ29vZCBwcmFjdGljZVxyXG4gIHwgdG8gYXZvaWQgYm9keSBwYXJzaW5nIGZvciBgR0VUYCByZXF1ZXN0cy5cclxuICB8XHJcbiAgKi9cclxuICB3aGl0ZWxpc3RlZE1ldGhvZHM6IFsnUE9TVCcsICdQVVQnLCAnUEFUQ0gnLCAnREVMRVRFJ10sXHJcblxyXG4gIC8qXHJcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgfCBKU09OIHBhcnNlciBzZXR0aW5nc1xyXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIHxcclxuICB8IFRoZSBzZXR0aW5ncyBmb3IgdGhlIEpTT04gcGFyc2VyLiBUaGUgdHlwZXMgZGVmaW5lcyB0aGUgcmVxdWVzdCBjb250ZW50XHJcbiAgfCB0eXBlcyB3aGljaCBnZXRzIHByb2Nlc3NlZCBieSB0aGUgSlNPTiBwYXJzZXIuXHJcbiAgfFxyXG4gICovXHJcbiAganNvbjoge1xyXG4gICAgZW5jb2Rpbmc6ICd1dGYtOCcsXHJcbiAgICBsaW1pdDogJzFtYicsXHJcbiAgICBzdHJpY3Q6IHRydWUsXHJcbiAgICB0eXBlczogW1xyXG4gICAgICAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICdhcHBsaWNhdGlvbi9qc29uLXBhdGNoK2pzb24nLFxyXG4gICAgICAnYXBwbGljYXRpb24vdm5kLmFwaStqc29uJyxcclxuICAgICAgJ2FwcGxpY2F0aW9uL2NzcC1yZXBvcnQnLFxyXG4gICAgXSxcclxuICB9LFxyXG5cclxuICAvKlxyXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIHwgRm9ybSBwYXJzZXIgc2V0dGluZ3NcclxuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICB8XHJcbiAgfCBUaGUgc2V0dGluZ3MgZm9yIHRoZSBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYCBwYXJzZXIuIFRoZSB0eXBlc1xyXG4gIHwgZGVmaW5lcyB0aGUgcmVxdWVzdCBjb250ZW50IHR5cGVzIHdoaWNoIGdldHMgcHJvY2Vzc2VkIGJ5IHRoZSBmb3JtIHBhcnNlci5cclxuICB8XHJcbiAgKi9cclxuICBmb3JtOiB7XHJcbiAgICBlbmNvZGluZzogJ3V0Zi04JyxcclxuICAgIGxpbWl0OiAnMW1iJyxcclxuICAgIHF1ZXJ5U3RyaW5nOiB7fSxcclxuXHJcbiAgICAvKlxyXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB8IENvbnZlcnQgZW1wdHkgc3RyaW5ncyB0byBudWxsXHJcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHxcclxuICAgIHwgQ29udmVydCBlbXB0eSBmb3JtIGZpZWxkcyB0byBudWxsLiBIVE1MIGZvcm1zIHJlc3VsdHMgaW4gZmllbGQgc3RyaW5nXHJcbiAgICB8IHZhbHVlIHdoZW4gdGhlIGZpZWxkIGlzIGxlZnQgYmxhbmsuIFRoaXMgb3B0aW9uIG5vcm1hbGl6ZXMgYWxsIHRoZSBibGFua1xyXG4gICAgfCBmaWVsZCB2YWx1ZXMgdG8gXCJudWxsXCJcclxuICAgIHxcclxuICAgICovXHJcbiAgICBjb252ZXJ0RW1wdHlTdHJpbmdzVG9OdWxsOiB0cnVlLFxyXG5cclxuICAgIHR5cGVzOiBbXHJcbiAgICAgICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxyXG4gICAgXSxcclxuICB9LFxyXG5cclxuICAvKlxyXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIHwgUmF3IGJvZHkgcGFyc2VyIHNldHRpbmdzXHJcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgfFxyXG4gIHwgUmF3IGJvZHkganVzdCByZWFkcyB0aGUgcmVxdWVzdCBib2R5IHN0cmVhbSBhcyBhIHBsYWluIHRleHQsIHdoaWNoIHlvdVxyXG4gIHwgY2FuIHByb2Nlc3MgYnkgaGFuZC4gVGhpcyBtdXN0IGJlIHVzZWQgd2hlbiByZXF1ZXN0IGJvZHkgdHlwZSBpcyBub3RcclxuICB8IHN1cHBvcnRlZCBieSB0aGUgYm9keSBwYXJzZXIuXHJcbiAgfFxyXG4gICovXHJcbiAgcmF3OiB7XHJcbiAgICBlbmNvZGluZzogJ3V0Zi04JyxcclxuICAgIGxpbWl0OiAnMW1iJyxcclxuICAgIHF1ZXJ5U3RyaW5nOiB7fSxcclxuICAgIHR5cGVzOiBbXHJcbiAgICAgICd0ZXh0LyonLFxyXG4gICAgXSxcclxuICB9LFxyXG5cclxuICAvKlxyXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIHwgTXVsdGlwYXJ0IHBhcnNlciBzZXR0aW5nc1xyXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIHxcclxuICB8IFRoZSBzZXR0aW5ncyBmb3IgdGhlIGBtdWx0aXBhcnQvZm9ybS1kYXRhYCBwYXJzZXIuIFRoZSB0eXBlcyBkZWZpbmVzIHRoZVxyXG4gIHwgcmVxdWVzdCBjb250ZW50IHR5cGVzIHdoaWNoIGdldHMgcHJvY2Vzc2VkIGJ5IHRoZSBmb3JtIHBhcnNlci5cclxuICB8XHJcbiAgKi9cclxuICBtdWx0aXBhcnQ6IHtcclxuICAgIC8qXHJcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHwgQXV0byBwcm9jZXNzXHJcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHxcclxuICAgIHwgVGhlIGF1dG8gcHJvY2VzcyBvcHRpb24gd2lsbCBwcm9jZXNzIHVwbG9hZGVkIGZpbGVzIGFuZCB3cml0ZXMgdGhlbSB0b1xyXG4gICAgfCB0aGUgYHRtcGAgZm9sZGVyLiBZb3UgY2FuIHR1cm4gaXQgb2ZmIGFuZCB0aGVuIG1hbnVhbGx5IHVzZSB0aGUgc3RyZWFtXHJcbiAgICB8IHRvIHBpcGUgc3RyZWFtIHRvIGEgZGlmZmVyZW50IGRlc3RpbmF0aW9uLlxyXG4gICAgfFxyXG4gICAgfCBJdCBpcyByZWNvbW1lbmRlZCB0byBrZWVwIGBhdXRvUHJvY2Vzcz10cnVlYC4gVW5sZXNzIHlvdSBhcmUgcHJvY2Vzc2luZyBiaWdnZXJcclxuICAgIHwgZmlsZSBzaXplcy5cclxuICAgIHxcclxuICAgICovXHJcbiAgICBhdXRvUHJvY2VzczogdHJ1ZSxcclxuXHJcbiAgICAvKlxyXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB8IEZpbGVzIHRvIGJlIHByb2Nlc3NlZCBtYW51YWxseVxyXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB8XHJcbiAgICB8IFlvdSBjYW4gdHVybiBvZmYgYGF1dG9Qcm9jZXNzYCBmb3IgY2VydGFpbiByb3V0ZXMgYnkgZGVmaW5pbmdcclxuICAgIHwgcm91dGVzIGluc2lkZSB0aGUgZm9sbG93aW5nIGFycmF5LlxyXG4gICAgfFxyXG4gICAgfCBOT1RFOiBNYWtlIHN1cmUgdGhlIHJvdXRlIHBhdHRlcm4gc3RhcnRzIHdpdGggYSBsZWFkaW5nIHNsYXNoLlxyXG4gICAgfFxyXG4gICAgfCBDb3JyZWN0XHJcbiAgICB8IGBgYGpzXHJcbiAgICB8IC9wcm9qZWN0cy86aWQvZmlsZVxyXG4gICAgfCBgYGBcclxuICAgIHxcclxuICAgIHwgSW5jb3JyZWN0XHJcbiAgICB8IGBgYGpzXHJcbiAgICB8IHByb2plY3RzLzppZC9maWxlXHJcbiAgICB8IGBgYFxyXG4gICAgKi9cclxuICAgIHByb2Nlc3NNYW51YWxseTogW10sXHJcblxyXG4gICAgLypcclxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgfCBUZW1wb3JhcnkgZmlsZSBuYW1lXHJcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHxcclxuICAgIHwgV2hlbiBhdXRvIHByb2Nlc3NpbmcgaXMgb24uIFdlIHdpbGwgdXNlIHRoaXMgbWV0aG9kIHRvIGNvbXB1dGUgdGhlIHRlbXBvcmFyeVxyXG4gICAgfCBmaWxlIG5hbWUuIEFkb25pc0pzIHdpbGwgY29tcHV0ZSBhIHVuaXF1ZSBgdG1wUGF0aGAgZm9yIHlvdSBhdXRvbWF0aWNhbGx5LFxyXG4gICAgfCBIb3dldmVyLCB5b3UgY2FuIGFsc28gZGVmaW5lIHlvdXIgb3duIGN1c3RvbSBtZXRob2QuXHJcbiAgICB8XHJcbiAgICAqL1xyXG4gICAgLy8gdG1wRmlsZU5hbWUgKCkge1xyXG4gICAgLy8gfSxcclxuXHJcbiAgICAvKlxyXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB8IEVuY29kaW5nXHJcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHxcclxuICAgIHwgUmVxdWVzdCBib2R5IGVuY29kaW5nXHJcbiAgICB8XHJcbiAgICAqL1xyXG4gICAgZW5jb2Rpbmc6ICd1dGYtOCcsXHJcblxyXG4gICAgLypcclxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgfCBDb252ZXJ0IGVtcHR5IHN0cmluZ3MgdG8gbnVsbFxyXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB8XHJcbiAgICB8IENvbnZlcnQgZW1wdHkgZm9ybSBmaWVsZHMgdG8gbnVsbC4gSFRNTCBmb3JtcyByZXN1bHRzIGluIGZpZWxkIHN0cmluZ1xyXG4gICAgfCB2YWx1ZSB3aGVuIHRoZSBmaWVsZCBpcyBsZWZ0IGJsYW5rLiBUaGlzIG9wdGlvbiBub3JtYWxpemVzIGFsbCB0aGUgYmxhbmtcclxuICAgIHwgZmllbGQgdmFsdWVzIHRvIFwibnVsbFwiXHJcbiAgICB8XHJcbiAgICAqL1xyXG4gICAgY29udmVydEVtcHR5U3RyaW5nc1RvTnVsbDogdHJ1ZSxcclxuXHJcbiAgICAvKlxyXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB8IE1heCBGaWVsZHNcclxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgfFxyXG4gICAgfCBUaGUgbWF4aW11bSBudW1iZXIgb2YgZmllbGRzIGFsbG93ZWQgaW4gdGhlIHJlcXVlc3QgYm9keS4gVGhlIGZpZWxkIGluY2x1ZGVzXHJcbiAgICB8IHRleHQgaW5wdXRzIGFuZCBmaWxlcyBib3RoLlxyXG4gICAgfFxyXG4gICAgKi9cclxuICAgIG1heEZpZWxkczogMTAwMCxcclxuXHJcbiAgICAvKlxyXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB8IFJlcXVlc3QgYm9keSBsaW1pdFxyXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB8XHJcbiAgICB8IFRoZSB0b3RhbCBsaW1pdCB0byB0aGUgbXVsdGlwYXJ0IGJvZHkuIFRoaXMgaW5jbHVkZXMgYWxsIHJlcXVlc3QgZmlsZXNcclxuICAgIHwgYW5kIGZpZWxkcyBkYXRhLlxyXG4gICAgfFxyXG4gICAgKi9cclxuICAgIGxpbWl0OiAnMjBtYicsXHJcblxyXG4gICAgLypcclxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgfCBUeXBlc1xyXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB8XHJcbiAgICB8IFRoZSB0eXBlcyB0aGF0IHdpbGwgYmUgY29uc2lkZXJlZCBhbmQgcGFyc2VkIGFzIG11bHRpcGFydCBib2R5LlxyXG4gICAgfFxyXG4gICAgKi9cclxuICAgIHR5cGVzOiBbXHJcbiAgICAgICdtdWx0aXBhcnQvZm9ybS1kYXRhJyxcclxuICAgIF0sXHJcbiAgfSxcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYm9keVBhcnNlckNvbmZpZ1xyXG4iXX0=