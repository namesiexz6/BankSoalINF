"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Application_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Application"));
const Soal_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Soal"));
const Matakuliah_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Matakuliah"));
const KomentarSoal_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/KomentarSoal"));
class SoalsController {
    async index({ view }) {
        const matakuliah = await Matakuliah_1.default.all();
        return view.render("auth/uploadSoal", { matakuliah });
    }
    async store({ request, response, session }) {
        const isi_soal = request.file("formFile");
        const semester = request.input("semester");
        const id_mk = request.input("mk");
        const nama_soal = request.input("namasoal");
        const nama = session.get("nama");
        session.put("semester", semester);
        if (!nama_soal) {
            return response.redirect("/uploadSoal");
        }
        if (!isi_soal) {
            return response.redirect("/uploadSoal");
        }
        await isi_soal.move(Application_1.default.publicPath("uploads"));
        await Soal_1.default.create({
            nama,
            id_mk,
            nama_soal,
            isi_soal: isi_soal.fileName,
        });
        return response.redirect("/");
    }
    async show({ view, request, session }) {
        const semester = request.input("semester");
        const mk = await Matakuliah_1.default.query()
            .where("id_semester", semester)
            .orderBy("id", "asc");
        let sks = 0;
        let id = request.input("edit");
        if (id != null) {
            session.put("edit", id);
        }
        else {
            session.put("edit", 0);
        }
        mk.forEach((mk) => {
            sks += mk.sks;
        });
        session.put("id_semester", semester);
        return view.render("auth/semester", { mk, sks });
    }
    async showsoal({ view, response, request, session }) {
        let id_mk = request.input("matakuliah_id");
        const mk = await Matakuliah_1.default.query()
            .where("id", id_mk)
            .orderBy("id", "asc")
            .firstOrFail();
        const soal = await Soal_1.default.query().where("id_mk", id_mk).orderBy("id", "asc");
        let id = request.input("edit");
        if (id == 1) {
            session.put("edit", id);
            const matakuliah = await Matakuliah_1.default.all();
            return view.render("auth/uploadSoal", { matakuliah });
        }
        else if (id == 3) {
            session.put("edit", id);
        }
        else {
            session.put("edit", 0);
        }
        session.put("namamk", mk.nama);
        session.put("id_matakuliah", id_mk);
        return view.render("auth/soal", { soal });
    }
    async lihatsoal({ view, request }) {
        let id_soal = request.input("soals_id");
        const soal = await Soal_1.default.query().where("id", id_soal).orderBy("id", "asc");
        const komentar_soal = await KomentarSoal_1.default.query()
            .where("id_soal", id_soal)
            .orderBy("id", "asc");
        return view.render("auth/lihatsoal", { soal, komentar_soal });
    }
    async komentar({ response, request }) {
        let id_soal = request.input("soals_id");
        const nama = request.input("nama");
        const isi_komentar = request.input("isi_komentar");
        const hapus = request.input("hapus");
        const id = request.input("komentar_id");
        if (hapus == "1") {
            await KomentarSoal_1.default.query().where("id", id).delete();
            return response.redirect("/lihatsoal?soals_id=" + id_soal);
        }
        if (!nama) {
            return response.redirect("/lihatsoal?soals_id=" + id_soal);
        }
        if (!isi_komentar) {
            return response.redirect("/lihatsoal?soals_id=" + id_soal);
        }
        await KomentarSoal_1.default.create({ id_soal, nama_komentar: nama, isi_komentar });
        return response.redirect("/lihatsoal?soals_id=" + id_soal);
    }
    async editmatakuliah({ response, request, session }) {
        const semester = request.input("semester");
        let cancel = request.input("cancel");
        if (session.get("edit") == 1) {
            if (cancel == "2") {
                return response.redirect("/semester?semester=" + semester);
            }
            else {
                const kode_mk = request.input("kode");
                const nama_mk = request.input("nama");
                const sks = request.input("sks");
                if (!kode_mk) {
                    session.flash('error', 'Error! KodeMata Kuliah tidak boleh kosong!');
                    return response.redirect("/semester?semester=" + semester);
                }
                if (!nama_mk) {
                    session.flash('error', 'Error! Nama Mata Kuliah tidak boleh kosong!');
                    return response.redirect("/semester?semester=" + semester);
                }
                if (!sks) {
                    session.flash('error', 'Error! SKS tidak boleh kosong!');
                    return response.redirect("/semester?semester=" + semester);
                }
                await Matakuliah_1.default.create({ id_semester: semester, kode: kode_mk, nama: nama_mk, sks: sks });
                return response.redirect("/semester?semester=" + semester);
            }
        }
        else if (session.get("edit") == 3) {
            if (cancel == "2") {
                return response.redirect("/semester?semester=" + semester);
            }
            let id = request.input("hapus");
            const soal = await Soal_1.default.query().where("id_mk", id).orderBy("id", "asc");
            await KomentarSoal_1.default.query().whereIn("id_soal", soal.map(row => row.id.toString())).delete();
            await Soal_1.default.query().where("id_mk", id).delete();
            await Matakuliah_1.default.query().where("id", id).delete();
            return response.redirect("/semester?semester=" + semester);
        }
        else {
            session.put("matakuliah_id", request.input("update"));
            if (cancel == "2") {
                session.put("matakuliah_id", -1);
                return response.redirect("/semester?semester=" + semester);
            }
            else if (cancel == "3") {
                let id = request.input("update");
                const kode_mk = request.input("kode");
                const nama_mk = request.input("nama");
                const sks = request.input("sks");
                if (!kode_mk) {
                    session.flash('error', 'Error! Kode Mata Kuliah tidak boleh kosong!');
                    return response.redirect("/semester?semester=" + semester);
                }
                if (!nama_mk) {
                    session.flash('error', 'Error! Nama Mata Kuliah tidak boleh kosong!');
                    return response.redirect("/semester?semester=" + semester);
                }
                if (!sks) {
                    session.flash('error', 'Error! SKS tidak boleh kosong!');
                    return response.redirect("/semester?semester=" + semester);
                }
                await Matakuliah_1.default.query().where("id", id).update({ id_semester: semester, kode: kode_mk, nama: nama_mk, sks: sks });
                session.put("matakuliah_id", -1);
                console.log("kode_mk");
                return response.redirect("/semester?semester=" + semester);
            }
            return response.redirect("/semester?semester=" + semester + "&edit=2");
        }
    }
    async editsoal({ response, request, session }) {
        const id_matakuliah = request.input("matakuliah_id");
        let cancel = request.input("cancel");
        if (session.get("edit") == 3) {
            if (cancel == "2") {
                return response.redirect("/soal?matakuliah_id=" + id_matakuliah);
            }
            let id = request.input("hapus");
            console.log(id);
            await KomentarSoal_1.default.query().where("id_soal", id).delete();
            await Soal_1.default.query().where("id", id).delete();
            return response.redirect("/soal?matakuliah_id=" + id_matakuliah);
        }
    }
}
exports.default = SoalsController;
//# sourceMappingURL=data:application/json;base64,